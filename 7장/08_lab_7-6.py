'''
    작성일 : 2023년 11월 1일
    작성자 : 컴퓨터공학부 201995004 강명일
    설명 : lab 7-6 도시의 이름과 인구를 튜플로 묶어보자.
'''
# 다음과 같은 리스트가 생성되어 있다.
city_info =[('서울', 9765), ('부산', 3441), ('인천', 2954), ('광주', 1501), ('대전', 1531)]

# 최대값 저장위한 변수
max_pop = 0
# 최소값 저장위한 변수
min_pop = 999999999999999999
# 전체 인구수 저장위한 변수
total_pop = 0

# 인구수가 가장 많은 도시 출력위한 변수
max_city = None
# 인구수가 가장 적은 도시 출력위한 변수
min_city = None
# city_info 리스트에서 반복문 시작
for city in city_info:
    # 전체 인구수를 구하기 위해 city_info 리스트 안의 튜플 중에서 2번째 항목(인구수)를 total_pop에 계속해서 더한다
    total_pop += city[1]
    # 현재 인구수가 여태까지 저장되어있는 max_pop(최대값)보다 크다면
    if city[1] > max_pop :
        # 지금 도시를 최대인구 도시로 재설정하고 인구수를 재설정한다.
        max_pop = city[1]
        max_city = city
    # 현재 인구수가 여태까지 저장되어있는 min_pop(최소값)보다 작다면
    if city[1] < min_pop:
        # 지금 도시를 최소인구 도시로 재설정하고 인구수를 재설정한다.
        min_pop = city[1]
        min_city = city
''' 
    max값을 임의로 크게 잡아버리면 모든 수가 max 값보다 작을 때
    저장되어 있지도 않던 max값이 최대값인 것처럼 출력될 수 있다.
    그러므로 max값을 0으로 잡은 후 각 리스트에 대입하여 현재 max값보다 현재 리스트가 크다면
    해당 리스트를 max 값으로 만들어 버린 후 다음 리스트와 계속 비교하는 식으로 하는 것을 반복한다면
    마지막에는 max값은 리스트 안에 있는 값 중 가장 큰 값이 나올 것이다.
    min 값도 같은 이유로 일부러 높게 잡는 것

    + 위는 기준을 잡기 위해 설정을 하는 것인데, 리스트 내의 항목을 기준으로 잡는게 아무래도 가장 좋을 것이다.
    ex) 다음 파일에 저장된 방식처럼 max_pop = city_info[0][1]
'''

# max_city에는 튜플 형식(도시, 인구수)으로 들어가 있기 때문에 도시만 출력 위해서 [0]을 출력시킨다.
# 튜플 형식이 아니라 도시에 대한 값만 넣고 싶다면 반복문에서 max_city = city[0] 형식으로 넣은 후 출력할 때 max_city만 불러도 된다.
print(f"최대인구 : {max_city[0]}, 인구 : {max_pop} 천명")
print(f"최소인구 : {min_city[0]}, 인구 : {min_pop} 천명")
# 평균 인구는 모든 도시의 전체 인구수 / 모든 도시 수
print(f"리스트 도시 평균 인구 : {total_pop / len(city_info)} 천명")